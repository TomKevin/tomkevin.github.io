{"version":3,"sources":["components/Profile/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Profile","componentDidMount","navbar","document","querySelector","sectionOne","console","log","IntersectionObserver","entries","sectionOneObserver","forEach","entry","concat","JSON","stringify","isIntersecting","classList","remove","add","rootMargin","observe","navToggler","navbarToggler","navbarMenu","toggle","smoothScroll","event","preventDefault","targetId","currentTarget","getAttribute","window","scrollTo","top","offsetTop","behavior","_this2","this","querySelectorAll","elem","addEventListener","contains","click","react_default","a","createElement","className","href","onClick","id","Component","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","react_router_dom","react_router","path","exact","strict","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f1df4b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Profile.css';\r\n\r\nclass Profile extends Component {\r\n\r\n    componentDidMount = () => {\r\n\r\n        const navbar = document.querySelector('.navbar');\r\n\r\n        const sectionOne = document.querySelector('.section-one');\r\n\r\n        console.log(sectionOne);\r\n\r\n        const sectionOneObserver = new IntersectionObserver((entries, sectionOneObserver) => {\r\n\r\n            entries.forEach(entry => {\r\n\r\n                console.log(entry);\r\n\r\n                console.log(`${JSON.stringify(entry.isIntersecting)}`);\r\n\r\n                if(!entry.isIntersecting) {\r\n\r\n                    navbar.classList.add(\"navbar-scrolled\");\r\n\r\n                } else {\r\n\r\n                    navbar.classList.remove(\"navbar-scrolled\");\r\n\r\n                    // navbar.classList.add(\"navbar-scrolled\");\r\n\r\n                }\r\n\r\n                // navbar.classList.add(\"navbar-scrolled\");\r\n\r\n            });\r\n\r\n        }, {\r\n\r\n            rootMargin: \"-200px 0px 0px 0px\"\r\n\r\n        });\r\n\r\n        sectionOneObserver.observe(sectionOne);\r\n\r\n    }\r\n\r\n    navToggler = () => {\r\n\r\n        const navbarToggler = document.querySelector(\".navbar-toggler\");\r\n\r\n        const navbarMenu = document.querySelector(\".navbar ul\");\r\n\r\n        navbarToggler.classList.toggle('open-navbar-toggler');\r\n\r\n        navbarMenu.classList.toggle('open');\r\n\r\n    }\r\n\r\n    smoothScroll = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const targetId = event.currentTarget.getAttribute(\"href\");\r\n\r\n        console.log(targetId);\r\n\r\n        window.scrollTo({ \r\n\r\n            top: document.querySelector(targetId).offsetTop,\r\n\r\n            behavior: \"smooth\"\r\n\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const navbarLinks = document.querySelectorAll('.navbar a');\r\n\r\n        navbarLinks.forEach(elem => elem.addEventListener(\"click\", () => {\r\n\r\n            const navbarToggler = document.querySelector(\".navbar-toggler\");\r\n\r\n            const navbarMenu = document.querySelector(\".navbar ul\");\r\n\r\n            if(navbarMenu.classList.contains('open')) {\r\n\r\n                navbarToggler.click();\r\n\r\n            }\r\n\r\n        }));\r\n\r\n        return (\r\n\r\n            <div>\r\n\r\n                <nav className=\"navbar nav-scrolled\">\r\n\r\n                    <a className=\"navbar-brand\" href=\"/profile\"><span>K</span>EVIN <span>M</span>OTURI</a>\r\n                        \r\n                    <ul>\r\n\r\n                        <li><a href=\"#home\" onClick={this.smoothScroll}>Home</a></li>\r\n\r\n                        <li><a href=\"#about\" onClick={this.smoothScroll}>About</a></li>\r\n\r\n                        <li><a href=\"#about\" onClick={this.smoothScroll}>Technologies</a></li>\r\n\r\n                    </ul>\r\n\r\n                    <button className=\"navbar-toggler\" onClick={() => this.navToggler()}>\r\n\r\n                        <span></span>\r\n\r\n                    </button>\r\n                    \r\n                </nav>\r\n\r\n                <section className=\"section-one\" id=\"home\">\r\n\r\n                    <h1>Section One</h1>\r\n\r\n                </section>\r\n\r\n                <section id=\"about\">\r\n\r\n                    <h1>Section Two</h1>\r\n\r\n                </section>\r\n                \r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n};\r\n\r\nexport default Profile;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\n\n// Importing Components\nimport Profile from './components/Profile/Profile';\n\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = { \n      \n      \n      \n    };\n    \n  }\n  \n  \n\n  render() {\n\n    return (\n\n      <Router>\n\n        <Switch>\n\n            <Route path=\"/\" exact strict component={Profile} />\n\n            <Route exact component={Profile} />\n\n        </Switch>\n\n      </Router>\n\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}