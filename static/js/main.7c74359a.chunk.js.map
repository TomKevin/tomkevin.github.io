{"version":3,"sources":["assets/img/react.png","assets/img/nodejs.png","assets/img/mongodb.png","assets/img/graphql.png","assets/img/laravel.png","assets/img/electron.png","assets/img/mysql.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ImageWrapper","_ref","source","title","react_default","a","createElement","src","alt","className","index","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","value","setState","next","sections","document","querySelectorAll","forEach","section","i","scrollIntoView","behavior","prev","handleOnDragStart","e","preventDefault","state","_this2","react_carousel_default","slidesPerPage","centered","slides","App_ImageWrapper","require","autoPlay","animationSpeed","infinite","breakpoints","1000","500","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c74359a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react.47ce6e77.png\";","module.exports = __webpack_public_path__ + \"static/media/nodejs.08ebf3d0.png\";","module.exports = __webpack_public_path__ + \"static/media/mongodb.c81f0054.png\";","module.exports = __webpack_public_path__ + \"static/media/graphql.8c005987.png\";","module.exports = __webpack_public_path__ + \"static/media/laravel.caa9b591.png\";","module.exports = __webpack_public_path__ + \"static/media/electron.3ba2a5b8.png\";","module.exports = __webpack_public_path__ + \"static/media/mysql.4988e89c.png\";","import React, { Component } from 'react';\nimport Carousel from '@brainhubeu/react-carousel';\nimport '@brainhubeu/react-carousel/lib/style.css';\nimport './App.css';\n\nconst ImageWrapper = ({ source, title }) => (\n\n    <figure>\n\n      <img src={source} alt={title} />\n\n      <figcaption className=\"caption\">\n\n       {title}\n\n      </figcaption>\n\n    </figure>\n\n);\n\n\nlet index = 0;\n\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = { \n      \n      value: 0 \n      \n    };\n    \n  }\n  \n  onChange = (value) => {\n\n    this.setState({ value });\n\n  }\n\n  next = () => {\n\n      if(index < 5) {\n\n          const sections = document.querySelectorAll('section');\n\n          index++;\n\n          sections.forEach((section, i) => {\n\n              if(i === index) {\n\n                  section.scrollIntoView({behavior: 'smooth'});\n\n              }\n              \n          });\n\n      }\n\n  }\n\n  prev = () => {\n\n      if(index > 0) {\n\n          const sections = document.querySelectorAll('section');\n\n          index--;\n\n          sections.forEach((section, i) => {\n\n              if(i === index) {\n\n                  section.scrollIntoView({behavior: 'smooth'});\n\n              }\n              \n          });\n\n      }\n\n  }\n\n  handleOnDragStart = e => e.preventDefault();\n\n  render() {\n\n    return (\n\n      <div className=\"main\">\n\n        <div className=\"content\">\n        \n          <section>\n\n            <div className=\"overlay\"></div>\n\n            <div className=\"wrapper\">\n\n              <div className=\"intro\">\n\n                <h1>Hi, I`m Kevin</h1>\n\n                <p>Software Developer</p>\n\n              </div>\n\n            </div>\n          \n          </section>\n\n          <section>\n\n            <h1>My Technology Stack</h1>\n\n            <Carousel\n\n              slidesPerPage={3}\n\n              centered\n\n              value={this.state.value}\n\n              onChange={this.onChange}\n\n              slides={[\n\n                (<ImageWrapper source={require('./assets/img/react.png')} title=\"React Js And React Native\" />),\n\n                (<ImageWrapper source={require('./assets/img/nodejs.png')} title=\"Node Js\" />),\n\n                (<ImageWrapper source={require('./assets/img/mongodb.png')} title=\"Mongo DB\" />),\n\n                (<ImageWrapper source={require('./assets/img/graphql.png')} title=\"GraphQL\" />),\n\n                (<ImageWrapper source={require('./assets/img/laravel.png')} title=\"Laravel\" />),\n\n                (<ImageWrapper source={require('./assets/img/electron.png')} title=\"Electron\" />),\n\n                (<ImageWrapper source={require('./assets/img/mysql.png')} title=\"MySQL\" />),\n\n              ]}\n\n              autoPlay={2000}\n\n              animationSpeed={1000}\n\n              infinite\n              \n              breakpoints={{\n\n                1000: {\n\n                  slidesPerPage: 2,\n\n                },\n\n                500: {\n\n                  slidesPerPage: 1,\n\n                }\n                \n              }}\n\n            />\n\n          </section>\n        \n          <section>\n          \n            <h1>Section 3</h1>\n          \n          </section>\n        \n          <section>\n          \n            <h1>Section 4</h1>\n          \n          </section>\n        \n          <section>\n          \n            <h1>Section 5</h1>\n          \n          </section>\n        \n          <section>\n          \n            <h1>Section 6</h1>\n          \n          </section>\n        \n        </div>\n\n        <div className=\"nav\">\n\n          <button className=\"prev\" onClick={() => this.prev()} id=\"prev\">Previous</button>\n\n          <button className=\"next\" onClick={() => this.next()} id=\"next\">Next</button>\n\n        </div>\n        \n      </div>\n\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}